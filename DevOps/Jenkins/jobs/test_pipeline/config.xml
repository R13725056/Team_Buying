<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1385.vb_58b_86ea_fff1">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2150.v4cfd8916915c">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.40.0">
      <projectUrl>https://github.com/R13725056/Team_Buying.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.40.0">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3908.vd6b_b_5a_a_54010">
    <script>pipeline {
    agent any

    tools {
        nodejs &quot;NodeJS&quot;  // Use the NodeJS name configured in Jenkins
    }

    stages {
        stage(&apos;Checkout&apos;) {
            steps {
                // Check out the code from the Git repository
                git branch: &apos;main&apos;, url: &apos;https://github.com/R13725056/Team_Buying.git&apos;
            }
        }

        stage(&apos;Debug: List Workspace Contents&apos;) {
            steps {
                // List contents of the workspace to see the directory structure
                sh &apos;ls -R&apos;
            }
        }

        stage(&apos;Install Dependencies&apos;) {
            steps {
                dir(&apos;front-end&apos;) {  // Changed from &apos;front-end&apos; to &apos;frond-end&apos;
                    sh &apos;npm install&apos;
                }
            }
        }

        stage(&apos;Run Tests&apos;) {
            steps {
                dir(&apos;front-end&apos;) {  // Changed from &apos;front-end&apos; to &apos;frond-end&apos;
                    sh &apos;npm test&apos;
                }
            }
        }

        stage(&apos;Build&apos;) {
            steps {
                dir(&apos;front-end&apos;) {  // Changed from &apos;front-end&apos; to &apos;frond-end&apos;
                    sh &apos;npm run build&apos;
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace to save disk space
            cleanWs()
        }
        success {
            // Send notification or perform other tasks on success
            echo &apos;Build and test completed successfully.&apos;
        }
        failure {
            // Handle failure scenarios, e.g., send failure notification
            echo &apos;Build or test failed.&apos;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
